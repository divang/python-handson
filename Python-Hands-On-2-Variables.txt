1: Python - Variable Names
A variable name must start with a letter or the underscore character
A variable name cannot start with a number
A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )
Variable names are case-sensitive (age, Age and AGE are three different variables)


2: Multi Words Variable Names
Camel Case
> myVariableName = "John"
Pascal Case
> MyVariableName = "John"
Snake Case
> my_variable_name = "John"

3: Many Values to Multiple Variables
x, y, z = "Orange", "Banana", "Cherry"
print(x)
print(y)
print(z)

4: One Value to Multiple Variables
x = y = z = "Orange"
print(x)
print(y)
print(z)

5: Output Variables
x = "Python is awesome"
print(x)

x = "Python"
y = "is"
z = "awesome"
print(x, y, z)

x = "Python "
y = "is "
z = "awesome"
print(x + y + z)

x = 5
y = 10
print(x + y)

#Error in output
x = 5
y = "John"
print(x + y)

x = 5
y = "John"
print(x, y)

6: Global Variables
x = "awesome"

def myfunc():
  print("Python is " + x)

myfunc()

7: Global Variable and local Variable behaviour: 
#If you create a variable with the same name inside a function, this variable will be local, and can only be used inside the function. The global variable with the same name will remain as it was, global and with the original value.

x = "awesome"

def myfunc():
  x = "fantastic"
  print("Python is " + x)

myfunc()

print("Python is " + x)

8: The global Keyword
# To create a global variable inside a function, you can use the global keyword.
def myfunc():
  global x
  x = "fantastic"

myfunc()

print("Python is " + x)

9: Override Global variable value:
x = "awesome"

def myfunc():
  global x
  x = "fantastic"

myfunc()

print("Python is " + x)

